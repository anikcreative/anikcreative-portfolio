{"version":3,"sources":["theme/Primordial.ts","theme/Theme.ts","content/Navigation/Logo.tsx","contexts/AppContext.tsx","content/Navigation/Nav.tsx","content/Footer/Footer.tsx","components/Layout/Section.tsx","components/TextContent/Headings.tsx","components/TextContent/Text.tsx","components/Interactive/Button.tsx","components/Interactive/TextButton.tsx","content/Intro/IntroHeadline.tsx","content/Intro/Intro.tsx","content/Intro/IntroButtons.tsx","content/Contact/Contact.tsx","content/Backdrops/Backdrop.tsx","content/Backdrops/BackdropImageSpacer.tsx","images.ts","content/Backdrops/IntroPart1.tsx","content/Backdrops/IntroPart2.tsx","content/Backdrops/IntroPart3.tsx","content/Work/index.tsx","content/About/index.tsx","ScrollArea.tsx","Loader.tsx","App.tsx","MountApp.tsx","serviceWorker.js","index.js"],"names":["Colors","reduceColorOpacity","color","factor","factorNormalized","replace","Logo","StyledLogo","className","version","id","xmlns","xmlnsXlink","xmlSpace","viewBox","transform","d","styled","svg","AppContext","React","createContext","currentScrollTop","setCurrentScrollTop","scrollTop","viewportWidth","AppContextProvider","props","useState","window","innerWidth","setViewportWidth","handleViewportResize","event","useLayoutEffect","addEventListener","removeEventListener","state","Provider","value","children","Nav","appContext","useContext","isVisible","setIsVisible","useEffect","navVisibilityUpperLimit","innerHeight","determineNavVisibility","StyledNav","opacity","nav","Footer","StyledFooter","ref","containerRef","div","Section","section","h1","Heading2","h2","Heading5","h3","h4","h5","span","p","button","margin","importance","IntroHeadline","Intro","StyledIntro","IntroInnerWrapper","textColor","textShadow","IntroSpacer","IntroMessage","IntroButtons","IntroButtonsContainer","zIndex","visible","PrimaryIntroButton","onClick","title","SecondaryIntroButton","IntroButton","Contact","StyledContact","Backdrop","viewportSize","setViewportSize","vw","StyledBackdrop","backgroundcolor","backgroundColor","height","heightAsPercentage","zindex","ImageContainer","image","StyledBackdropImage","src","forcedHeightBreakpoint","img","BackdropImageSpacer","StyledBackdropImageSpacer","__IMAGES__","IntroPart1","setHeightAsPercentage","introPaneHeight","calculateHeightAsPercentage","order","Screen","IntroPart2","limit","IntroPart3","LeftMarginDecoration","RightMarginDecoration","MarginDecorationBase","Work","StyledWorkSection","ScrollArea","onScrollFrame","values","renderTrackVertical","trackProps","style","rest","width","top","right","bottom","borderRadius","renderThumbVertical","thumbProps","customStyles","Loader","completion","setCompletion","loaderState","setLoaderState","delay","setDelay","useInterval","currentCompletion","setTimeout","StyledLoader","ProgressBarTop","ProgressBarRight","getRightCompletion","ProgressBarBottom","getBottomCompletion","ProgressBarLeft","getLeftCompletion","ProgressBarBase","App","borderColor","setBorderColor","introButtonsVisible","setIntroButtonsVisible","invertedScrollThumbHeight","setInvertedScrollThumbHeight","invertedScrollThumbAnchor","setInvertedScrollThumbAnchor","introButtonsRef","useRef","contentContainerRef","worksContainerRef","contactContainerRef","footerContainerRef","calculateInvertedScrollThumbHeight","current","scrollbarVerticalThumb","querySelector","introBackdrop","document","footerBounds","getBoundingClientRect","scrollThumbBounds","introBackdropBounds","handleScroll","introButtonsBottom","worksContainerTop","determineIntroButtonsVisibility","offsetTop","AppContainer","BackdropContainer","Content","TestDiv","main","MountApp","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2571df36.chunk.js","sourcesContent":["export const Colors = {\r\n  accent: \"hsla(356, 60%, 55%, 1.0)\",\r\n  bright: \"hsla(37, 90%, 68%, 1.0)\",\r\n  dark: \"hsla(203, 16%, 10%, 1.0)\",\r\n  medium: \"hsla(173, 5%, 38%, 1.0)\",\r\n  light: \"hsla(51, 100%, 93%, 1.0)\",\r\n  white: \"hsla(0, 0%, 100%, 1.0)\",\r\n  grayLight: \"hsla(0, 0%, 80%, 1.0)\",\r\n  grayMedium: \"hsla(0, 0%, 67%, 1.0)\",\r\n\r\n  textDefault: \"hsla(203, 16%, 10%, 1.0)\",\r\n  textAccent: \"hsla(356, 60%, 55%, 1.0)\",\r\n  textHighlight: \"hsla(203, 16%, 10%, 1.0)\",\r\n  textLight: \"hsla(173, 5%, 38%, 1.0)\",\r\n  link: \"hsla(356, 60%, 55%, 1.0)\",\r\n};","export { Colors } from \"./Primordial\";\r\n\r\nexport function reduceColorOpacity(color: string, factor: number): string {\r\n  // Reduces color opacity by the indicated factor.\r\n  // \"factor\" should be between 0.0 and 1.0.\r\n  // If \"factor\" is less than 0.0, a value of 0.0 will be used instead.\r\n  // If \"factor\" is greater than 1.0, a value of 1.0 will be used instead.\r\n\r\n  let factorNormalized: number;\r\n  if (factor < 0.0) factorNormalized = 0.0;\r\n  else if (factor > 1.0) factorNormalized = 1.0;\r\n  else factorNormalized = factor;\r\n  \r\n  return color.replace(\"1.0\", `${1.0 - factorNormalized}`);\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"../../theme\";\r\n\r\nexport const Logo = () => (\r\n  <StyledLogo \r\n    className=\"logo-svg\"\r\n    version=\"1.1\" \r\n    id=\"Layer_1\" \r\n    xmlns=\"https://www.w3.org/2000/svg\" \r\n    xmlnsXlink=\"https://www.w3.org/1999/xlink\"  \r\n    xmlSpace=\"preserve\"\r\n    viewBox=\"0 20 220 80\"\r\n  >\r\n    <g transform=\"translate(-899 172)\">\r\n      <g className=\"st0 shadow\">\r\n        <path className=\"st1\" d=\"M947.1-91.4H927l-3.1,9.4h-16.6l20.7-56.4h18.2L966.8-82h-16.6L947.1-91.4z M943.2-103.3l-6.1-18.4l-6.2,18.4\r\n          H943.2z\"/>\r\n        <path className=\"st1\" d=\"M1025.3-82h-15.8l-20.8-31.6V-82H973v-56.6h15.8l20.8,32v-32h15.8V-82z\"/>\r\n        <path className=\"st1\" d=\"M1051.3-138.6V-82h-15.8v-56.6H1051.3z\"/>\r\n        <path className=\"st1\" d=\"M1092.2-111l21.9,29h-19l-17.8-25v25h-15.8v-56.6h15.8v24.5l18-24.5h18.8L1092.2-111z\"/>\r\n      </g>\r\n      <g className=\"st0 fill\">\r\n        <path className=\"st2\" d=\"M944.1-91.4H924l-3.1,9.4h-16.6l20.7-56.4h18.2L963.8-82h-16.6L944.1-91.4z M940.2-103.3l-6.1-18.4l-6.2,18.4\r\n          H940.2z\"/>\r\n        <path className=\"st2\" d=\"M1022.3-82h-15.8l-20.8-31.6V-82H970v-56.6h15.8l20.8,32v-32h15.8V-82z\"/>\r\n        <path className=\"st2\" d=\"M1048.3-138.6V-82h-15.8v-56.6H1048.3z\"/>\r\n        <path className=\"st2\" d=\"M1089.2-111l21.9,29h-19l-17.8-25v25h-15.8v-56.6h15.8v24.5l18-24.5h18.8L1089.2-111z\"/>\r\n      </g>\r\n      <g className=\"st0 outline\">\r\n        <path className=\"st3\" d=\"M941.1-95.4H921l-3.1,9.4h-16.6l20.7-56.4h18.2L960.8-86h-16.6L941.1-95.4z M937.2-107.3l-6.1-18.4l-6.2,18.4\r\n          H937.2z\"/>\r\n        <path className=\"st3\" d=\"M1019.3-86h-15.8l-20.8-31.6V-86H967v-56.6h15.8l20.8,32v-32h15.8V-86z\"/>\r\n        <path className=\"st3\" d=\"M1045.3-142.6V-86h-15.8v-56.6H1045.3z\"/>\r\n        <path className=\"st3\" d=\"M1086.2-115l21.9,29h-19l-17.8-25v25h-15.8v-56.6h15.8v24.5l18-24.5h18.8L1086.2-115z\"/>\r\n      </g>\r\n    </g>\r\n  </StyledLogo>\r\n);\r\nexport default Logo;\r\n\r\nconst StyledLogo = styled.svg`\r\n  height: 32px;\r\n  transition: 0.2s;\r\n\r\n  .st0, .st1, .st2, .st3,\r\n  path {\r\n    transition: 0.2s;\r\n  }\r\n  \r\n  .st0 {\r\n    enable-background: new;\r\n  }\r\n  .st1 {\r\n    fill: #47D1A7;\r\n  }\r\n  .st2 {\r\n    fill: ${Colors.accent};\r\n  }\r\n  .st3 {\r\n    fill: none;\r\n    stroke: #000000;\r\n    opacity: 0.8;\r\n    stroke-width: 2;\r\n  }\r\n`;","import React, { useLayoutEffect } from \"react\";\r\n\r\nexport interface AppContextState {\r\n  currentScrollTop: number;\r\n  setCurrentScrollTop: (scrollTop: number) => void;\r\n  \r\n  viewportWidth: number;\r\n}\r\n\r\nexport const AppContext = React.createContext<AppContextState>({\r\n  currentScrollTop: 0,\r\n  setCurrentScrollTop: (scrollTop: number) => {},\r\n\r\n  viewportWidth: 0\r\n});\r\n\r\nexport const AppContextProvider: React.FC = (props) => {\r\n  const [currentScrollTop, setCurrentScrollTop] = React.useState<number>(0);\r\n  const [viewportWidth, setViewportWidth] = React.useState<number>(window.innerWidth);\r\n  const handleViewportResize = (event?: any) => setViewportWidth(window.innerWidth);\r\n  useLayoutEffect(() => {\r\n    window.addEventListener(\"resize\", handleViewportResize);\r\n    return () => window.removeEventListener(\"resize\", handleViewportResize);\r\n  }, []);\r\n\r\n  const state: AppContextState = {\r\n    currentScrollTop: currentScrollTop,\r\n    setCurrentScrollTop: setCurrentScrollTop,\r\n\r\n    viewportWidth: viewportWidth\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={state}>\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"../../theme\";\r\nimport Logo from \"./Logo\";\r\nimport NavMenu from \"./NavMenu\";\r\nimport { AppContext } from \"../../contexts/AppContext\";\r\n\r\ninterface NavProps {\r\n  backgroundColor: string;\r\n  textColor: string;\r\n}\r\nconst Nav: React.FunctionComponent<NavProps> = (props: NavProps): JSX.Element => {\r\n  const appContext = useContext(AppContext);\r\n  const [isVisible, setIsVisible] = useState<boolean>(false);\r\n\r\n  // Determine if nav should be shown, based on current scroll position\r\n  const determineNavVisibility = (scrollTop: number) => {\r\n    const navVisibilityUpperLimit = (2.8 * window.innerHeight);\r\n    if (scrollTop < navVisibilityUpperLimit) setIsVisible(false);\r\n    else setIsVisible(true);\r\n  }\r\n  \r\n  const handleScroll = () => {\r\n    const scrollTop: number = appContext.currentScrollTop;\r\n    determineNavVisibility(scrollTop);\r\n  }\r\n  useEffect(handleScroll, [appContext.currentScrollTop]);\r\n\r\n  return (\r\n    <StyledNav\r\n      opacity={isVisible ? 1.0 : 0.0}\r\n      className=\"navbar\"\r\n      {...props}\r\n    >\r\n      <Logo />\r\n    </StyledNav>\r\n  );\r\n}\r\nexport default Nav;\r\n\r\ninterface StyledNavProps {\r\n  opacity: number;\r\n}\r\nconst StyledNav = styled.nav<StyledNavProps>`\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  position: absolute;\r\n  \r\n  top: 0;\r\n  padding: 10px 16px;\r\n\r\n  background: ${Colors.light};\r\n  color: ${Colors.white};\r\n\r\n  opacity: ${props => props.opacity};\r\n\r\n  transition: background 0.2s, opacity 0.2s;\r\n  z-index: 5;\r\n\r\n  @media screen and (max-width: 1064px) {\r\n    left: 40px;\r\n  }\r\n\r\n  @media screen and (min-width: 1064px) {\r\n    left: calc(50% - 512px);\r\n  }\r\n`;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"../../theme/Theme\";\r\nimport { ContentSectionProps } from \"../ContentSectionProps\";\r\n\r\nconst Footer: React.FunctionComponent<ContentSectionProps> = \r\n  (props: ContentSectionProps): JSX.Element => {\r\n  return (\r\n    <StyledFooter ref={props.containerRef}>\r\n      Sup. this is a footer.\r\n    </StyledFooter>\r\n  );\r\n}\r\nexport default Footer;\r\n\r\nconst StyledFooter = styled.div`\r\n  width: 100%;\r\n  height: 200px;\r\n\r\n  background: ${Colors.medium};\r\n  color: ${Colors.white};\r\n\r\n  font-size: 1.6rem;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Section = styled.section`\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  @media screen and (max-width: 600px) {\r\n    padding-left: 20px;\r\n    padding-right: 40px;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 1064px) {\r\n    padding-left: 40px;\r\n    padding-right: 60px;\r\n  }\r\n\r\n  @media screen and (min-width: 1064px) {\r\n    padding-left: calc(50% - 512px);\r\n    padding-right: calc(50% - 492px);\r\n  }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Heading1 = styled.h1`\r\n  font-weight: 800;\r\n  margin: 0;\r\n\r\n  @media screen and (max-width: 400px) {\r\n    font-size: 3.6rem;\r\n  }\r\n\r\n  @media screen and (min-width: 400px) and (max-width: 600px) {\r\n    font-size: 4.0rem;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    font-size: 4.6rem;\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    font-size: 5.0rem;\r\n  }\r\n`;\r\n\r\nexport const Heading2 = styled.h2`\r\n  font-weight: 800;\r\n  margin: 0;\r\n\r\n  @media screen and (max-width: 400px) {\r\n    font-size: 2.4rem;\r\n  }\r\n\r\n  @media screen and (min-width: 400px) and (max-width: 600px) {\r\n    font-size: 2.6rem;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    font-size: 3.2rem;\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    font-size: 4.0rem;\r\n  }\r\n`;\r\n\r\nexport const Heading3 = styled.h3`\r\n  font-weight: 600;\r\n  margin: 0;\r\n\r\n  @media screen and (max-width: 400px) {\r\n    font-size: 2.0rem;\r\n  }\r\n\r\n  @media screen and (min-width: 400px) and (max-width: 600px) {\r\n    font-size: 2.2rem;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    font-size: 2.4rem;\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    font-size: 2.8rem;\r\n  }\r\n`;\r\n\r\nexport const Heading4 = styled.h4`\r\n  font-weight: 600;\r\n  margin: 0;\r\n\r\n  @media screen and (max-width: 400px) {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  @media screen and (min-width: 400px) and (max-width: 600px) {\r\n    font-size: 1.6rem;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    font-size: 1.8rem;\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    font-size: 2.1rem;\r\n  }\r\n`;\r\n\r\nexport const Heading5 = styled.h5`\r\n  font-weight: 400;\r\n  margin: 0;\r\n\r\n  @media screen and (max-width: 400px) {\r\n    font-size: 1.4rem;\r\n  }\r\n\r\n  @media screen and (min-width: 400px) and (max-width: 600px) {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    font-size: 1.6rem;\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    font-size: 1.8rem;\r\n  }\r\n`;","import styled from \"styled-components\";\r\nimport { Colors } from \"../../theme/Theme\";\r\n\r\nexport const AccentText = styled.span`\r\n  color: ${Colors.accent};\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n  font-weight: 400;\r\n  margin: 6px 0;\r\n\r\n  @media screen and (max-width: 400px) {\r\n    font-size: 1.3rem;\r\n  }\r\n\r\n  @media screen and (min-width: 400px) and (max-width: 600px) {\r\n    font-size: 1.3rem;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    font-size: 1.35rem;\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    font-size: 1.4rem;\r\n  }\r\n`;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors, reduceColorOpacity } from \"../../theme/Theme\";\r\n\r\ntype ButtonImportance = \"primary\" | \"secondary\" | \"tertiary\";\r\ninterface ButtonProps extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, StyledButtonProps {\r\n  ref?: React.RefObject<HTMLButtonElement>;\r\n}\r\nexport const Button: React.FC<ButtonProps> = (props: ButtonProps): JSX.Element => {\r\n  const { className, importance, ref, ...rest } = props;\r\n\r\n  const renderClassName = (): string => {\r\n    return `${className} btn btn-${importance}`;\r\n  }\r\n\r\n  return (\r\n    <StyledButton\r\n      {...rest}\r\n      className={renderClassName()}\r\n      ref={props.ref}\r\n      importance={importance}\r\n    />\r\n  );\r\n}\r\nexport default Button;\r\n\r\ninterface StyledButtonProps {\r\n  importance: ButtonImportance;\r\n  margin?: \"left\" | \"right\";\r\n}\r\nconst StyledButton = styled.button<StyledButtonProps>`\r\n  position: relative;\r\n  margin-top: 8px;\r\n  margin-right: ${props => props.margin === \"right\" ? 16 : 0}px;\r\n  margin-bottom: 4px;\r\n  margin-left: ${props => props.margin === \"left\" ? 16 : 0}px;\r\n  padding: 12px 20px;\r\n\r\n  background: ${props => props.importance === \"primary\" ?\r\n    Colors.accent : \"transparent\"};\r\n  border: 1px solid ${Colors.accent};\r\n  box-shadow: 0 0 0 0 ${reduceColorOpacity(Colors.accent, 0.7)};\r\n  opacity: 0.9;\r\n\r\n  font-size: ${props => props.importance === \"tertiary\" ?\r\n    1.3 : 1.4}rem;\r\n  font-weight: 600;\r\n  color: ${props => props.importance === \"primary\" ?\r\n    Colors.white : Colors.accent};\r\n  text-transform: ${props => props.importance === \"tertiary\" ?\r\n    \"none\" : \"uppercase\"};\r\n  letter-spacing: 0.04rem;\r\n\r\n  cursor: pointer;\r\n  transition: 0.2s;\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 1px 4px ${reduceColorOpacity(Colors.accent, 0.7)};\r\n    opacity: 1.0;\r\n\r\n    text-shadow: 0 0 3px ${props => reduceColorOpacity(\r\n      (props.importance === \"primary\" ?\r\n        Colors.white :\r\n        Colors.accent),\r\n      0.65)\r\n    };\r\n  }\r\n`;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"../../theme/Theme\";\r\n\r\ninterface TextButtonProps extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {\r\n  ref?: React.RefObject<HTMLButtonElement>;\r\n}\r\nexport const TextButton: React.FC<TextButtonProps> = (props: TextButtonProps): JSX.Element => {\r\n  const { className, ref, ...rest } = props;\r\n\r\n  const renderClassName = (): string => {\r\n    return `${className} btn btn-text`;\r\n  }\r\n\r\n  return (\r\n    <StyledButton\r\n      {...rest}\r\n      className={renderClassName()}\r\n      ref={props.ref}\r\n    />\r\n  );\r\n}\r\nexport default TextButton;\r\n\r\n\r\nconst StyledButton = styled.button`\r\n  position: relative;\r\n\r\n  background: none;\r\n  border: none;\r\n  box-shadow: none;\r\n  color: ${Colors.white};\r\n  outline: none;\r\n\r\n  &:active,\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;","import React from \"react\";\r\nimport { Section, Heading2 } from \"../../components\";\r\nimport styled from \"styled-components\";\r\n\r\nconst IntroHeadline: React.FC = () => {\r\n  return (\r\n    <Heading2 className=\"lead-in\">\r\n      Hello, I'm Anik.<br/>\r\n    </Heading2>\r\n  );\r\n}\r\nexport default IntroHeadline;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Section, Heading5 } from \"../../components\";\r\nimport IntroHeadline from \"./IntroHeadline\";\r\n\r\n\r\ninterface IntroProps {\r\n  children?: React.ReactNode | React.ReactNodeArray;\r\n  textColor?: string;\r\n  textShadow?: string;\r\n}\r\nconst Intro: React.FunctionComponent<IntroProps> = (props: IntroProps) => {\r\n  return (\r\n    <StyledIntro className=\"intro-text\">\r\n      <IntroInnerWrapper\r\n        className=\"intro-text-inner-wrapper\"\r\n        textColor={props.textColor || \"black\"}\r\n        textShadow={props.textShadow || \"none\"}\r\n      >\r\n        <IntroHeadline />\r\n        {props.children}\r\n      </IntroInnerWrapper>\r\n    </StyledIntro>\r\n  );\r\n}\r\nexport default Intro;\r\n\r\nexport const StyledIntro = styled(Section)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: nowrap;\r\n  align-items: flex-start;\r\n  justify-content: flex-start; \r\n\r\n  position: absolute;\r\n  top: calc(50vh - 40px);\r\n\r\n  @media screen and (max-width: 600px) {\r\n    top: calc(50vh - 40px);\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    top: calc(50vh - 20px);\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    top: calc(50vh - 40px);\r\n  }\r\n\r\n  z-index: 10;\r\n`;\r\n\r\ninterface IntroInnerWrapperProps {\r\n  textColor: string;\r\n  textShadow: string;\r\n}\r\nconst IntroInnerWrapper = styled.div<IntroInnerWrapperProps>`\r\n  color: ${props => props.textColor};\r\n  text-shadow: ${props => props.textShadow};\r\n  user-select: none;\r\n\r\n  @media screen and (max-width: 600px) {\r\n    max-width: unset;\r\n    margin-top: -80px;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    max-width: 600px;\r\n    margin-top: -100px;\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    max-width: 600px;\r\n    margin-top: -60px;\r\n  }\r\n`;\r\n\r\nexport const IntroSpacer = styled(Section)`\r\n  min-height: 300vh;\r\n`;\r\n\r\nexport const IntroMessage = styled(Heading5)`\r\n  margin-top: 24px;\r\n`;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"../../theme/Theme\";\r\n\r\ninterface IntroButtonsProps {\r\n  visible: boolean;\r\n  containerRef?: React.RefObject<HTMLDivElement>;\r\n}\r\nconst IntroButtons: React.FC<IntroButtonsProps> = (props: IntroButtonsProps) => {\r\n  const handleViewWorkRequested = () => {\r\n    // Go to works section\r\n  }\r\n\r\n  const handleContactRequested = () => {\r\n    // go to contact section\r\n  }\r\n\r\n  return (\r\n    <IntroButtonsContainer\r\n      className=\"intro-buttons-container\"\r\n      ref={props.containerRef}\r\n      zIndex={props.visible ? 4 : 1}\r\n      opacity={props.visible ? 1 : 0}\r\n    >\r\n      <PrimaryIntroButton\r\n       className=\"intro-button intro-button-see-work\"\r\n       onClick={handleViewWorkRequested}\r\n       title=\"See my work\"\r\n      >\r\n        See My Work\r\n      </PrimaryIntroButton>\r\n\r\n      <SecondaryIntroButton\r\n        className=\"intro-button intro-button-contact\"\r\n        onClick={handleContactRequested}\r\n        title=\"Get in touch\"\r\n      >\r\n        Get In Touch\r\n      </SecondaryIntroButton>\r\n    </IntroButtonsContainer>\r\n  );\r\n}\r\nexport default IntroButtons;\r\n\r\ninterface IntroButtonsContainerProps {\r\n  zIndex: number;\r\n  opacity: number;\r\n}\r\nconst IntroButtonsContainer = styled.div<IntroButtonsContainerProps>`\r\n  position: absolute;\r\n  z-index: ${props => props.zIndex};\r\n  opacity: ${props => props.opacity};\r\n  transition: opacity 0.4s, font-size 0.4s;\r\n\r\n  @media screen and (max-width: 450px) {\r\n    top: calc(50% + 24px);\r\n    left: 20px;\r\n\r\n    font-size: 1.3rem;\r\n  }\r\n\r\n  @media screen and (min-width: 450px) and (max-width: 600px) {\r\n    top: calc(50% + 16px);\r\n    left: 20px;\r\n\r\n    font-size: 1.3rem;\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    top: calc(50% + 24px);\r\n    left: 40px;\r\n\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  @media screen and (min-width: 800px) and (max-width: 1064px) {\r\n    top: calc(50% + 48px);\r\n    left: 40px;\r\n\r\n    font-size: 1.6rem;\r\n  }\r\n\r\n  @media screen and (min-width: 1064px) {\r\n    top: calc(50% + 48px);\r\n    left: calc(50% - 512px);\r\n\r\n    font-size: 1.6rem;\r\n  }\r\n`;\r\n\r\nconst IntroButton = styled.button`\r\n  display: inline-block;\r\n\r\n  border: 0;\r\n  font-weight: 600;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n\r\n  transition: 0.2s;\r\n  cursor: pointer;\r\n  \r\n  @media screen and (max-width: 400px) {\r\n    padding: 10px 14px;\r\n\r\n    &:not(:last-child) {\r\n      margin: 0 16px 16px 0;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 400px) and (max-width: 600px) {\r\n    padding: 12px 18px;\r\n\r\n    &:not(:last-child) {\r\n      margin: 0 16px 16px 0;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 600px) and (max-width: 800px) {\r\n    padding: 16px 20px;\r\n\r\n    &:not(:last-child) {\r\n      margin: 0 16px 16px 0;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 800px) {\r\n    padding: 18px 32px;\r\n\r\n    &:not(:last-child) {\r\n      margin: 0 16px 16px 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PrimaryIntroButton = styled(IntroButton)`\r\n  background: hsla(356, 60%, 55%, 0.8);\r\n  border: 1px solid ${Colors.accent};\r\n  box-shadow: 0 0 0 0 hsla(356, 60%, 55%, 0.3);\r\n\r\n  color: ${Colors.white};\r\n\r\n  &:hover,\r\n  &:active {\r\n    background: hsla(356, 60%, 55%, 1.0);\r\n    box-shadow: 0 0 0 4px hsla(356, 60%, 55%, 0.3);\r\n    text-shadow: 0 0 2px hsla(0, 0%, 100%, 0.25);\r\n  }\r\n`;\r\n\r\nconst SecondaryIntroButton = styled(IntroButton)`\r\n  background: hsla(0, 0%, 100%, 0.9);\r\n  border: 1px solid ${Colors.accent};\r\n  box-shadow: 0 0 0 0 hsla(37, 90%, 100%, 0.2);\r\n\r\n  color: ${Colors.accent};\r\n\r\n  &:hover,\r\n  &:active {\r\n    background: hsla(0, 0%, 100%, 1.0);\r\n    box-shadow: 0 0 0 4px hsla(356, 60%, 55%, 0.3);\r\n    text-shadow: 0 0 2px hsla(356, 60%, 55%, 0.2);\r\n  }\r\n`;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"../../theme/Theme\";\r\nimport { ContentSectionProps } from \"../ContentSectionProps\";\r\n\r\nconst Contact: React.FunctionComponent<ContentSectionProps> = \r\n  (props: ContentSectionProps): JSX.Element => {\r\n  return (\r\n    <StyledContact ref={props.containerRef}>\r\n      Get in touch\r\n    </StyledContact>\r\n  );\r\n}\r\nexport default Contact;\r\n\r\nconst StyledContact = styled.div`\r\n  width: 100%;\r\n  height: 500px;\r\n\r\n  background: ${Colors.light};\r\n  color: ${Colors.textDefault};\r\n\r\n  font-size: 1.6rem;\r\n`;","import React, { useContext, useLayoutEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { AppContext } from \"../../contexts/AppContext\";\r\n\r\ntype ViewportSize = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\";\r\n\r\nexport interface BackdropInstanceProps {\r\n  order: number;\r\n}\r\ninterface BackdropProps {\r\n  zIndex: number;\r\n  className?: string;\r\n  image?: string;\r\n  backgroundColor?: string;\r\n  heightAsPercentage?: number;\r\n  children?: React.ReactNode | React.ReactNodeArray;\r\n}\r\nconst Backdrop: React.FC<BackdropProps> = (props: BackdropProps): JSX.Element => {\r\n  const appContext = useContext(AppContext);\r\n\r\n  const getViewportSize = () => {\r\n    const vw: number = appContext.viewportWidth;\r\n    const getSize = (): ViewportSize => {\r\n      if (vw <= 600) return \"xs\";\r\n      else if (vw <= 900) return \"sm\";\r\n      else if (vw <= 1200) return \"md\";\r\n      else if (vw <= 1600) return \"lg\";\r\n      else if (vw <= 1920) return \"xl\";\r\n      else return \"xxl\";\r\n    }\r\n    setViewportSize(getSize());\r\n  }\r\n  const [viewportSize, setViewportSize] = useState<ViewportSize>(\"sm\");\r\n  useLayoutEffect(getViewportSize, [appContext.viewportWidth]);\r\n\r\n  const renderImageSrc = () => {\r\n    return `images/${props.image}_${viewportSize}.jpg`;\r\n  }\r\n\r\n  return (\r\n    <StyledBackdrop\r\n      className={`backdrop ${props.className}`}\r\n      backgroundcolor={props.backgroundColor || 'transparent'}\r\n      height={(props.heightAsPercentage || props.heightAsPercentage === 0) ? \r\n        props.heightAsPercentage : 100}\r\n      zindex={props.zIndex}\r\n    >\r\n      {props.children}\r\n      <ImageContainer>\r\n        {props.image && \r\n        <StyledBackdropImage\r\n          className=\"backdrop-image\"\r\n          src={renderImageSrc()}\r\n          forcedHeightBreakpoint={1140}\r\n          zIndex={5}\r\n        />}\r\n      </ImageContainer>\r\n    </StyledBackdrop>\r\n  );\r\n}\r\nexport default Backdrop;\r\n\r\n\r\n\r\ninterface StyledBackdropProps {\r\n  height: number;\r\n  backgroundcolor: string;\r\n  zindex: number;\r\n}\r\nconst StyledBackdrop = styled.div<StyledBackdropProps>`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: ${props => props.height}%;\r\n  top: 0;\r\n  left: 0;\r\n  background: ${props => props.backgroundcolor};\r\n  \r\n  transform: translateZ(0);\r\n  z-index: ${props => props.zindex};\r\n  overflow: hidden;\r\n`;\r\n\r\n\r\n\r\nconst ImageContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  filter: contrast(1.2);\r\n  z-index: 3;\r\n`;\r\ninterface StyledBackdropImageProps {\r\n  forcedHeightBreakpoint: number;\r\n  zIndex: number;\r\n}\r\nconst StyledBackdropImage = styled.img<StyledBackdropImageProps>`\r\n  min-width: 100%;\r\n  object-fit: cover;\r\n  transform: translateZ(0);\r\n  z-index: ${props => props.zIndex};\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface BackdropImageSpacerProps {\r\n  containerRef?: any;\r\n}\r\nexport const BackdropImageSpacer: React.FunctionComponent<BackdropImageSpacerProps>= \r\n  (props: BackdropImageSpacerProps): JSX.Element => {\r\n  return (\r\n    <StyledBackdropImageSpacer\r\n      ref={props.containerRef}\r\n    />\r\n  );\r\n}\r\nconst StyledBackdropImageSpacer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: none;\r\n`;","export const __IMAGES__: string[] = [\r\n  \"topomap\",\r\n  \"atacama\"\r\n];","import React, { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Backdrop, { BackdropInstanceProps } from \"./Backdrop\";\r\nimport { Intro, IntroMessage } from \"../../content\";\r\nimport { AppContext } from \"../../contexts/AppContext\";\r\nimport { Colors } from \"../../theme/Theme\";\r\nimport { __IMAGES__ } from \"../../images\";\r\n\r\n\r\nexport const IntroPart1: React.FC<BackdropInstanceProps> = (props: BackdropInstanceProps) => {\r\n  const appContext = useContext(AppContext);\r\n  const [heightAsPercentage, setHeightAsPercentage] = useState<number>(100);\r\n  const textShadowSetting: string = \"4px -4px 2px #000000, 4px 4px 2px #000000, -4px -4px 2px #000000, -4px 4px 2px #000000\";\r\n\r\n  const calculateHeightAsPercentage = (scrollTop: number) => {\r\n    const introPaneHeight: number = window.innerHeight - 4;\r\n    if (scrollTop === 0) setHeightAsPercentage(100);\r\n    else {\r\n      const difference = (scrollTop > introPaneHeight) ? 100 : (100 * (scrollTop / introPaneHeight));\r\n      setHeightAsPercentage(100 - difference);\r\n    }\r\n  }\r\n\r\n  const handleScroll = () => {\r\n    const scrollTop: number = appContext.currentScrollTop;\r\n    calculateHeightAsPercentage(scrollTop);\r\n  }\r\n  useEffect(handleScroll, [appContext.currentScrollTop]);\r\n\r\n  return (\r\n    <Backdrop\r\n      className=\"intro-part-1\"\r\n      zIndex={props.order}\r\n      image={__IMAGES__[0]}\r\n      backgroundColor={Colors.dark}\r\n      heightAsPercentage={heightAsPercentage}\r\n    >\r\n      <Intro\r\n        textColor={Colors.white}\r\n        textShadow={textShadowSetting}\r\n      >\r\n        <IntroMessage className=\"intro-1-message\">\r\n          I'm a designer and developer from Houston, Texas. I'm passionate about user experience and usability.\r\n        </IntroMessage>\r\n      </Intro>\r\n      <Screen />\r\n    </Backdrop>\r\n  );\r\n}\r\nexport default IntroPart1;\r\n\r\nconst Screen = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  background: #000000;\r\n  opacity: 0.3;\r\n  z-index: 5;\r\n`;","import React, { useContext, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Backdrop, { BackdropInstanceProps } from \"./Backdrop\";\r\nimport { AppContext } from \"../../contexts/AppContext\";\r\nimport { Intro, IntroMessage } from \"../../content\";\r\nimport { Colors } from \"../../theme/Theme\";\r\n\r\n\r\nexport const IntroPart2: React.FC<BackdropInstanceProps> = (props: BackdropInstanceProps) => {\r\n  const appContext = useContext(AppContext);\r\n  const [heightAsPercentage, setHeightAsPercentage] = useState<number>(100);\r\n  \r\n  const calculateHeightAsPercentage = (scrollTop: number) => {\r\n    const limit: number = (2 * window.innerHeight) - 4;\r\n    const introPaneHeight: number = window.innerHeight - 4;\r\n    if (scrollTop <= introPaneHeight) setHeightAsPercentage(100);\r\n    else {\r\n      const difference = (scrollTop > limit) ? 100 : (100 * ((scrollTop - introPaneHeight) / introPaneHeight));\r\n      setHeightAsPercentage(100 - difference);\r\n    }\r\n  }\r\n  const handleScroll = () => {\r\n    const scrollTop: number = appContext.currentScrollTop;\r\n    calculateHeightAsPercentage(scrollTop);\r\n  }\r\n  useEffect(handleScroll, [appContext.currentScrollTop]);\r\n\r\n  return (\r\n    <Backdrop\r\n      className=\"intro-part-2\"\r\n      zIndex={props.order}\r\n      backgroundColor={Colors.bright}\r\n      heightAsPercentage={heightAsPercentage}\r\n    >\r\n      <Intro\r\n        textColor={Colors.dark}\r\n      >\r\n        <IntroMessage className=\"intro-2-message\">\r\n          I love finding ways to make products and experiences intuitive, inclusive, reliable, and memorable.\r\n        </IntroMessage>\r\n      </Intro>\r\n    </Backdrop>\r\n  );\r\n}\r\nexport default IntroPart2;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Backdrop, { BackdropInstanceProps } from \"./Backdrop\";\r\nimport { Intro, IntroMessage } from \"../\";\r\nimport { Colors } from \"../../theme/Theme\";\r\n\r\n\r\nexport const IntroPart3: React.FC<BackdropInstanceProps> = (props: BackdropInstanceProps) => {\r\n  return (\r\n    <Backdrop\r\n      className=\"intro-part-3\"\r\n      zIndex={props.order}\r\n      backgroundColor={Colors.light}\r\n    >\r\n      <Intro\r\n        textColor={Colors.accent}\r\n      >\r\n        <IntroMessage className=\"intro-3-message\">\r\n          I'm currently focusing on human-centered design for enterprise web applications. Keep scrolling to see some of my recent work.\r\n        </IntroMessage>\r\n      </Intro>\r\n      <LeftMarginDecoration />\r\n      <RightMarginDecoration />\r\n    </Backdrop>\r\n  );\r\n}\r\nexport default IntroPart3;\r\n\r\n\r\nconst MarginDecorationBase = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  height: 100%;\r\n\r\n  background: url('images/red_dot.png');\r\n  background-repeat: repeat;\r\n  opacity: 0.5;\r\n\r\n  transition: opacity 0.3s;\r\n  z-index: 6;\r\n\r\n  @media screen and (max-width: 1044px) {\r\n    display: none;\r\n    width: 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1044px) {\r\n    display: block;\r\n  }\r\n`;\r\n\r\nconst LeftMarginDecoration = styled(MarginDecorationBase)`\r\n  left: 0;\r\n  @media screen and (min-width: 1044px) {\r\n    width: calc(50% - 442px);\r\n  }\r\n`;\r\nconst RightMarginDecoration = styled(MarginDecorationBase)`\r\n  right: 0;\r\n  @media screen and (min-width: 1044px) {\r\n    width: calc(50% - 400px);\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Section } from \"../../components\";\r\nimport { Colors } from \"../../theme\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface WorkSectionProps {\r\n  containerRef?: React.RefObject<HTMLDivElement>;\r\n}\r\nexport const Work: React.FC<WorkSectionProps> = (props: WorkSectionProps) => {\r\n  return (\r\n    <StyledWorkSection \r\n      className=\"work-section\"\r\n      ref={props.containerRef}\r\n    >\r\n      Hey hows it goin\r\n    </StyledWorkSection>\r\n  );\r\n}\r\nexport default Work;\r\n\r\nconst StyledWorkSection = styled(Section)`\r\n  height: 1000px;\r\n  background: ${Colors.light};\r\n`;","import React from \"react\";\r\nimport { Section } from \"../../components\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const About: React.FunctionComponent = () => {\r\n  return (\r\n    <StyledAboutSection>\r\n      Hi\r\n    </StyledAboutSection>\r\n  );\r\n}\r\nexport default About;\r\n\r\nconst StyledAboutSection = styled(Section)``;","import React, { useContext } from \"react\";\r\nimport { Scrollbars, positionValues } from \"react-custom-scrollbars\";\r\nimport { Colors } from \"./theme/Theme\";\r\nimport { AppContext } from \"./contexts/AppContext\";\r\n\r\nexport interface ScrollPositionValues extends positionValues {};\r\ninterface ScrollAreaProps {\r\n  children?: React.ReactNode | React.ReactNodeArray;\r\n}\r\nconst ScrollArea: React.FunctionComponent<ScrollAreaProps> = (props: ScrollAreaProps): JSX.Element => {\r\n  const appContext = useContext(AppContext);\r\n\r\n  const handleScroll = (values: positionValues) => appContext.setCurrentScrollTop(values.scrollTop);\r\n\r\n  const renderScrollbarTrack = (trackProps: any) => {\r\n    const { style, ...rest } = trackProps;\r\n    const customStyles = {\r\n      width: '20px',\r\n      top: '0',\r\n      right: '0',\r\n      bottom: '0',\r\n      borderRadius: '0',\r\n      backgroundColor: `transparent`,\r\n    };\r\n\r\n    return (\r\n      <div\r\n        {...rest}\r\n        style={{ ...style, ...customStyles }}\r\n        className=\"scrollbar-track-vertical\"\r\n      />\r\n    );\r\n  }\r\n\r\n  const renderScrollbarThumb = (thumbProps: any) => {\r\n    const { style, ...rest } = thumbProps;\r\n    const customStyles = {\r\n      backgroundColor: `${Colors.dark}`,\r\n      zIndex: 2,\r\n      transform: 'translate3d(0)'\r\n    };\r\n\r\n    return (\r\n      <div\r\n        {...rest}\r\n        style={{ ...style, ...customStyles }}\r\n        className=\"scrollbar-thumb-vertical\"\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Scrollbars\r\n      onScrollFrame={handleScroll}\r\n      renderTrackVertical={renderScrollbarTrack}\r\n      renderThumbVertical={renderScrollbarThumb}\r\n      style={{ zIndex: 2 }}\r\n    >\r\n      {props.children}\r\n    </Scrollbars>\r\n  );\r\n}\r\nexport default ScrollArea;","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useInterval from '@use-it/interval';\r\nimport { Colors } from \"./theme/Theme\";\r\n\r\ntype LoaderStates = \"active\" | \"complete\" | \"hidden\";\r\ninterface LoaderProps {\r\n  imagesLoaded?: boolean;\r\n}\r\nconst Loader: React.FunctionComponent<LoaderProps> = (props: LoaderProps): JSX.Element => {\r\n  const [completion, setCompletion] = useState<number>(0.00);      // value from 0.00 to 1.00, determining current completion of loading\r\n  const [loaderState, setLoaderState] = useState<LoaderStates>(\"active\");\r\n  const [delay, setDelay] = useState<number | null>(10);\r\n  \r\n  useInterval(() => {\r\n    setCompletion((currentCompletion) => currentCompletion + 0.01);\r\n  }, delay);\r\n  \r\n  useEffect(() => {\r\n    if (completion > 1.20) {\r\n      setDelay(null);\r\n      if (loaderState === \"active\") {\r\n        setLoaderState(\"complete\");\r\n        setTimeout(() => setLoaderState(\"hidden\"), 825);\r\n      }\r\n    }\r\n  }, [completion]);\r\n\r\n  const getTopCompletion = (currentCompletion: number): number => {\r\n    if (currentCompletion <= 0.25) return currentCompletion * 4;\r\n    else return 1.00;\r\n  }\r\n  const getRightCompletion = (currentCompletion: number): number => {\r\n    if (currentCompletion <= 0.25) return 0.00;\r\n    else if (currentCompletion > 0.25 && currentCompletion <= 0.50)\r\n      return (currentCompletion * 4) - 1;\r\n    else return 1.00;\r\n  }\r\n  const getBottomCompletion = (currentCompletion: number): number => {\r\n    if (currentCompletion <= 0.50) return 0.00;\r\n    else if (currentCompletion > 0.50 && completion <= 0.75)\r\n      return (currentCompletion * 4) - 2;\r\n    else return 1.00;\r\n  }\r\n  const getLeftCompletion = (currentCompletion: number): number => {\r\n    if (currentCompletion <= 0.75) return 0.00;\r\n    else return (currentCompletion * 4) - 3;\r\n  }\r\n\r\n  return (\r\n    <StyledLoader \r\n      className=\"loader\"\r\n      loaderState={loaderState}\r\n    >\r\n      <ProgressBarTop completion={getTopCompletion(completion)}/>\r\n      <ProgressBarRight completion={getRightCompletion(completion)}/>\r\n      <ProgressBarBottom completion={getBottomCompletion(completion)}/>\r\n      <ProgressBarLeft completion={getLeftCompletion(completion)}/>\r\n    </StyledLoader>\r\n  );\r\n}\r\nexport default Loader;\r\n\r\ninterface StyledLoaderProps {\r\n  loaderState: LoaderStates;\r\n}\r\nconst StyledLoader = styled.div<StyledLoaderProps>`\r\n  display: ${props => props.loaderState === \"hidden\" ?\r\n    \"none\" : \"block\"};\r\n  position: absolute;\r\n  top: -4px;\r\n  left: -4px;\r\n  width: 100vw;\r\n  height: 100vh;\r\n\r\n  background: ${Colors.white};\r\n  opacity: ${props => props.loaderState === \"active\" ?\r\n    \"1.0\" : \"0.0\"};\r\n  transition: 0.8s;\r\n  z-index: 1000;\r\n`;\r\n\r\ninterface ProgressBarProps {\r\n  completion: number;\r\n}\r\nconst ProgressBarBase = styled.div<ProgressBarProps>`\r\n  position: absolute;\r\n  background: ${Colors.accent};\r\n`;\r\nconst ProgressBarTop = styled(ProgressBarBase)`\r\n  top: 0;\r\n  left: 0;\r\n  width: ${props => (props.completion * 100)}%;\r\n  height: 4px;\r\n`;\r\nconst ProgressBarRight = styled(ProgressBarBase)`\r\n  top: 0;\r\n  right: 0;\r\n  width: 4px;\r\n  height: ${props => (props.completion * 100)}%;\r\n`;\r\nconst ProgressBarBottom = styled(ProgressBarBase)`\r\n  bottom: 0;\r\n  right: 0;\r\n  width: ${props => (props.completion * 100)}%;\r\n  height: 4px;\r\n`;\r\nconst ProgressBarLeft = styled(ProgressBarBase)`\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 4px;\r\n  height: ${props => (props.completion * 100)}%;\r\n`;","import React, { useContext, useLayoutEffect, useEffect, useRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Colors } from \"./theme\";\r\nimport {\r\n  IntroSpacer, IntroButtons,\r\n  IntroPart1, IntroPart2, IntroPart3,\r\n  BackdropImageSpacer,\r\n  Nav, Footer,\r\n  Work, Contact\r\n} from \"./content\";\r\nimport ScrollArea from \"./ScrollArea\";\r\nimport Loader from \"./Loader\";\r\nimport { AppContext } from \"./contexts/AppContext\";\r\n\r\n\r\n\r\nconst App: React.FunctionComponent = () => {\r\n  const appContext = useContext(AppContext);\r\n  const [borderColor, setBorderColor] = useState<string>(Colors.accent);\r\n  const [introButtonsVisible, setIntroButtonsVisible] = useState<boolean>(true);\r\n\r\n  const [invertedScrollThumbHeight, setInvertedScrollThumbHeight] = useState<number>(0);\r\n  const [invertedScrollThumbAnchor, setInvertedScrollThumbAnchor] = useState<\"top\" | \"bottom\">(\"top\");\r\n\r\n  // Container refs for each section\r\n  const introButtonsRef = useRef<HTMLDivElement>(null);\r\n  const contentContainerRef = useRef<HTMLDivElement>(null);\r\n  const worksContainerRef = useRef<HTMLDivElement>(null);\r\n  const contactContainerRef = useRef<HTMLDivElement>(null);\r\n  const footerContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Calculate inverted scroll thumb height\r\n  const calculateInvertedScrollThumbHeight = () => {\r\n    if (contentContainerRef && contentContainerRef.current\r\n      && footerContainerRef && footerContainerRef.current) {\r\n      const scrollbarVerticalThumb: HTMLDivElement | null = contentContainerRef.current.querySelector('.scrollbar-thumb-vertical');\r\n      const introBackdrop: HTMLDivElement | null = document.querySelector('.intro-part-1');\r\n      const footerBounds: ClientRect | DOMRect = footerContainerRef.current.getBoundingClientRect();\r\n\r\n      if (scrollbarVerticalThumb && introBackdrop) {\r\n        const scrollThumbBounds: ClientRect | DOMRect = scrollbarVerticalThumb.getBoundingClientRect();\r\n        const introBackdropBounds: ClientRect | DOMRect = introBackdrop.getBoundingClientRect();\r\n\r\n        if (scrollThumbBounds.bottom <= introBackdropBounds.bottom) {\r\n          setInvertedScrollThumbAnchor(\"top\");\r\n          setInvertedScrollThumbHeight(scrollThumbBounds.height)\r\n        }\r\n        else if (scrollThumbBounds.top <= introBackdropBounds.bottom) {\r\n          setInvertedScrollThumbAnchor(\"top\");\r\n          setInvertedScrollThumbHeight(introBackdropBounds.bottom - scrollThumbBounds.top);\r\n        }\r\n        else if (scrollThumbBounds.bottom <= footerBounds.top) {\r\n          setInvertedScrollThumbAnchor(\"bottom\");\r\n          setInvertedScrollThumbHeight(0);\r\n        }\r\n        else {\r\n          setInvertedScrollThumbAnchor(\"bottom\");\r\n          setInvertedScrollThumbHeight(scrollThumbBounds.bottom - footerBounds.top);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    setTimeout(calculateInvertedScrollThumbHeight, 500)\r\n  }, []);\r\n\r\n  // Determine in intro buttons should be shown (at top) based on current scroll position\r\n  const determineIntroButtonsVisibility = (scrollTop: number) => {\r\n    if (worksContainerRef && worksContainerRef.current\r\n      && introButtonsRef && introButtonsRef.current) {\r\n      const introButtonsBottom = introButtonsRef.current.getBoundingClientRect().bottom;\r\n      const worksContainerTop = worksContainerRef.current.getBoundingClientRect().top;\r\n\r\n      if (introButtonsBottom >= worksContainerTop - 20) setIntroButtonsVisible(false);\r\n      else setIntroButtonsVisible(true);\r\n    }\r\n  }\r\n\r\n  // Perform animation stage changes based on scroll position\r\n  const handleScroll = () => {\r\n    const scrollTop: number = appContext.currentScrollTop;\r\n\r\n    determineIntroButtonsVisibility(scrollTop);\r\n    calculateInvertedScrollThumbHeight();\r\n    \r\n    if (footerContainerRef && footerContainerRef.current\r\n      && scrollTop >= footerContainerRef.current.offsetTop - window.innerHeight) {\r\n      setBorderColor(Colors.medium);\r\n    }\r\n    else setBorderColor(Colors.accent);\r\n  }\r\n  useLayoutEffect(handleScroll, [false]);\r\n  useEffect(handleScroll, [appContext.currentScrollTop]);\r\n\r\n  return (\r\n    <AppContainer\r\n      className=\"app-container\"\r\n      borderColor={borderColor}\r\n    >\r\n      <Loader/>\r\n      \r\n      <BackdropContainer className=\"backdrop-container\">\r\n        <IntroPart1 order={3} />\r\n        <IntroPart2 order={2} />\r\n        <IntroPart3 order={1} />\r\n      </BackdropContainer>\r\n\r\n      <Nav\r\n        backgroundColor={Colors.light}\r\n        textColor={Colors.textDefault}\r\n      />\r\n      \r\n      <Content\r\n        className=\"main-content-container\"\r\n        invertedScrollThumbHeight={invertedScrollThumbHeight}\r\n        invertedScrollThumbAnchor={invertedScrollThumbAnchor}\r\n        ref={contentContainerRef}\r\n      >\r\n        <IntroButtons\r\n          visible={introButtonsVisible}\r\n          containerRef={introButtonsRef}\r\n        />\r\n        <ScrollArea>\r\n          <IntroSpacer />\r\n          <Work containerRef={worksContainerRef} />\r\n\r\n          <TestDiv className=\"bg\">Hi what's up</TestDiv>\r\n          <TestDiv>Hi what's up</TestDiv>\r\n          <TestDiv>Hi what's up</TestDiv>\r\n          <TestDiv className=\"bg\">Hi what's up</TestDiv>\r\n          <TestDiv className=\"bg\">Hi what's up</TestDiv>\r\n          <TestDiv className=\"bg\">Hi what's up</TestDiv>\r\n\r\n          <BackdropImageSpacer />\r\n\r\n          <Contact containerRef={contactContainerRef}/>\r\n\r\n          <Footer containerRef={footerContainerRef}/>\r\n        </ScrollArea>\r\n      </Content>\r\n    </AppContainer>\r\n  );\r\n}\r\nexport default App;\r\n\r\ninterface AppContainerProps {\r\n  borderColor: string;\r\n}\r\nconst AppContainer = styled.div<AppContainerProps>`\r\n  position: relative;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  min-width: 320px;\r\n\r\n  background: none;\r\n  border-top: 4px solid ${props => props.borderColor};\r\n  border-right: 4px solid ${props => props.borderColor};\r\n  border-bottom: 6px solid ${props => props.borderColor};\r\n  border-left: 4px solid ${props => props.borderColor};\r\n\r\n  z-index: 1;\r\n  transform: translate3d(0);\r\n  transition: border-color 0.4s;\r\n\r\n  &,\r\n  & * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nconst BackdropContainer = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: 1;\r\n`;\r\n\r\ninterface ContentProps {\r\n  invertedScrollThumbHeight: number;\r\n  invertedScrollThumbAnchor: \"top\" | \"bottom\";\r\n}\r\nconst Content = styled.main<ContentProps>`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: auto;\r\n\r\n  transform: translate3d(0);\r\n  z-index: 3;\r\n\r\n  & .scrollbar-thumb-vertical {\r\n    transform: translate3d(0);\r\n\r\n    :after {\r\n      content: \"\";\r\n      position: absolute;\r\n      top: ${props => props.invertedScrollThumbAnchor === \"top\" ? 0 : \"unset\"};\r\n      bottom: ${props => props.invertedScrollThumbAnchor === \"bottom\" ? 0 : \"unset\"};;\r\n      left: 0;\r\n      width: 100%;\r\n      height: ${props => props.invertedScrollThumbHeight}px;\r\n      max-height: 100%;\r\n      background: ${Colors.white};\r\n      transform: translate3d(0);\r\n      z-index: 4;\r\n    }\r\n  }\r\n`;\r\n\r\nconst TestDiv = styled.div`\r\n  height: 500px;\r\n  color: ${Colors.textDefault};\r\n  padding: 80px;\r\n  font-size: 24px;\r\n  background: none;\r\n  &.bg { background: ${Colors.grayLight}; }\r\n  &.bg-2 { background: ${Colors.light}; }\r\n`;","import React from \"react\";\r\nimport App from \"./App\";\r\nimport { AppContextProvider } from \"./contexts/AppContext\";\r\n\r\nconst MountApp = () => {\r\n  return (\r\n    <AppContextProvider>\r\n      <App/>\r\n    </AppContextProvider>\r\n  );\r\n}\r\nexport default MountApp;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MountApp from './MountApp';\r\nimport \"normalize.css\";\r\nimport \"./theme/fonts.css\";\r\nimport \"./theme/base.css\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MountApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}